getwd()
#Note: experiment is in an augmented block design; unreplicated progeny but with replicated checks
data <- read.csv("Guardian_pheno_raw.csv", header=TRUE, stringsAsFactors = FALSE)
geno <- read.csv("Guardian_phys_peak_marker_df.csv", header=TRUE, stringsAsFactors = FALSE)
library(ggplot2);library(ggthemes); library(lme4); library(emmeans)
View(data)
View(geno)
library(ggplot2);library(ggthemes); library(lme4); library(emmeans)
#Note: experiment is in an augmented block design; unreplicated progeny but with replicated checks
data <- read.csv("Guardian_pheno_raw.csv", header=TRUE, stringsAsFactors = FALSE)
geno <- read.csv("Guardian_phys_peak_marker_df.csv", header=TRUE, stringsAsFactors = FALSE)
View(geno)
View(data)
#Basic evaluation of the data
ggplot(data, aes(x=Final_Disease)) + geom_histogram() + theme_bw()
ggplot(data, aes(x=Final_Disease)) + geom_density() + theme_bw()
#Calculate entry EMMs, adjusting for effect of block based on replicated check data
lm.guard <- lmer(Final_Disease ~ Entry + (1|Block), data)
ls.guard <- emmeans(lm.guard, "Entry")
em.guard <- summary(ls.guard)
summary(ls.guard)
summary(lm.guard)
# IGNORE: data simulation #
Block = rep(c(1,2,3,4,5),each=20)
block_effect=Block*1
X=rep(rep(c(-1,1),each=10),5)
Y=X*3+rnorm(100)+block_effect
Treatment=rep(rep(c("trt","control"),each=10),5)
mydata=data.frame(Y=Y,Treatment=as.factor(Treatment),Block=as.factor(Block))
View(mydata)
# lm: fixed Treatment; random Block
mymodel1 = lmer(Y ~ Treatment + (1|Block), mydata)
#summary of the mixed model
summary(mymodel1)
#get the lsmean
mymodel1.em <- emmeans(mymodel1, "Treatment")
summary(mymodel1.em)
#get the variance component
VarCorr(mymodel1)
#BLUPS
ranef(mymodel1)
# lm: fixed Treatment; fixed Block
mymodel0 = lm(Y~Treatment+Block,mydata)
summary(mymodel0)
summary(mymodel1.em)
#summary of the mixed model
summary(mymodel1)
#get the lsmean
mymodel1.em <- emmeans(mymodel1, "Treatment")
#summary of the mixed model
summary(mymodel1)
summary(mymodel1.em)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(lawstat)
# data organization
str(Titanic)
# change into data frame
titanic <- as.data.frame(Titanic)
str(titanic)
titanic$Survival <- NA
for (i in 1:nrow(titanic)){
if (titanic$Survived[i]=="No"){
titanic$Survival[i]=0
} else {
titanic$Survival[i]=1
}
}
n.times <- titanic$Freq
titanic.new <- titanic[rep(seq_len(nrow(titanic)),n.times),]
titanic.new <- titanic.new[,-c(4,5)]
rownames(titanic.new) <- 1:nrow(titanic.new)
titanic <- titanic.new
# each observation has both 0 and 1 outcomes
#titanic$Yes <- c(titanic$Freq[17:32],rep(NA,16))
#titanic <- titanic[1:16,]
#titanic <- titanic[,-4]
#colnames(titanic)[4] <- "No"
# a model only includes intercept
tit.bin.0 <- glm(Survival ~ 1, data=titanic, family="binomial")
summary(tit.bin.0)
# additive model
tit.bin <- glm(Survival ~ Class + Sex + Age, data=titanic, family="binomial")
summary(tit.bin)
# include all the two-way interaction and call it full model
tit.bin.full <- glm(Survival ~ Class + Sex + Age + Class:Sex + Class:Age + Sex:Age, data=titanic, family="binomial")
summary(tit.bin.full)
# model fitting
stepAIC(tit.bin.0, scope=list(lower=tit.bin.0,upper=tit.bin.full), direction="both")
stepAIC(tit.bin.0, scope=list(lower=tit.bin.0,upper=tit.bin.full), direction="both",
k=log(nrow(titanic)))
# model includes class, sex, age, the interacitons between class and sex, and between class and age
tit.bin.2 <- glm(formula = Survival ~ Class + Sex + relevel(Age,ref="Adult") + Class:Sex +
Class:relevel(Age,ref="Adult"),
family = "binomial", data = titanic)
summary(tit.bin.2)
anova(mymodel1)
#summary of the mixed model
summary(mymodel1)
library(ggplot2)
library(lme4)
library(emmeans)
getwd()
setwd("..")
getwd()
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("PLS225_lab_dataset_1.csv", header=TRUE, stringsAsFactors = FALSE)
#To see class
(sapply(data, class))
#Number of lines:
length(unique(data$Accession))
#Number of blocks:
length(unique(data$Block))
#Number of lines:
length(unique(data$Accession))
View(data)
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
#To see class
(sapply(data, class))
#Number of lines:
length(unique(data$Accession))
#Number of blocks:
length(unique(data$Block))
#Base R histogram:
hist(na.omit(data$Score))
#Base R density:
plot(density(na.omit(data$Score)))
#ggplot2:
#ggplot(data, aes(x=Score)) + geom_histogram()
#ggplot(data, aes(x=Score)) + geom_density()
#Distribution is bimodal (one peak for resistant material, one peak for susceptible material)
#Using functions:
var(data$Score, na.rm=TRUE)
mean(data$Score, na.rm=TRUE)
sd(data$Score, na.rm=TRUE)
#Since the distribution is bimodal, further details would have to be given regarding the "resistant" peak or "susceptible" peak.
#Yield:
model_fus <- lmer(Score ~ (1|Accession) + (1|Block), data)
summary(model_fus)
Vg <- 3.3031
Ve <- 0.2267
data.no.na <- data[!is.na(data$Score),]
mean(table(data.no.na$Accession))
r <- 3.980531
H2 <- Vg/(Vg+Ve/r)
H2
getwd()
setwd("~")
getwd()
library(emmeans)
x1 <- sample(21:40, 20, replace=T)
x2 <- sample(c(0, 1), 20, replace=T)
epsilon <- rnorm(20, 0, 1)
Y = 5 + 0.7*x1 + x2 + epsilon
model <- lm(Y ~ x1 + x2)
summary(model)
model_em <- emmeans(model, "x2")
summary(model_em)
class(summary(model_em))
str(summary(model_em))
summary(model_em)$emmean
class(summary(model_em))
str(summary(model_em))
summary(model_em)$emmean
model_em
class(model_em)
model
summary(fam_var_mean_var_sd_4$var_mean)
sf <- c(0.8, 0.9, 0.95, 0.98)
b <- qnorm(sf, 0, 1)
B
b
dnorm(b, 0, 1)
pnorm(b, 0, 1, lower.tail=F)
si <- dnorm(b, 0, 1) / pnorm(b, 0, 1, lower.tail=F)
si
p=0.25
x <- rbinom(1000, 2, p)
unique(x)
mean(x)
w <- ifelse(x==1, 1, 0)
head(which(x==2))
# [1]  16  37  73  79  89 111
w[head(which(x==2))]
sum((x==0) != (w==0))
sum((x==0))
sum(w[x==0])
sum(w[x==0])
# [1] 0
sum(w[x==2])
# [1] 0
sum((x==1) != (w==1))
mean(w)
# [1] 0.529
mean(x)/2
p_hat <- mean(x)/2
# [1] 0.399
2*p_hat*(1-p_hat)
install.packages("cowplot")
library(rstan)
library("rstan")
require(Matrix)
getwd()
setwd("/Users/fangyiwang/Documents/GitHub")
getwd()
setwd("breeder_equation/")
ls()
list.files()
getwd()
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
#To see class
(sapply(data, class))
#Number of lines:
length(unique(data$Accession))
#Number of blocks:
length(unique(data$Block))
#Base R histogram:
hist(na.omit(data$Score))
#Base R density:
plot(density(na.omit(data$Score)))
#ggplot2:
#ggplot(data, aes(x=Score)) + geom_histogram()
#ggplot(data, aes(x=Score)) + geom_density()
#Distribution is bimodal (one peak for resistant material, one peak for susceptible material)
#Using functions:
var(data$Score, na.rm=TRUE)
mean(data$Score, na.rm=TRUE)
sd(data$Score, na.rm=TRUE)
#Since the distribution is bimodal, further details would have to be given regarding the "resistant" peak or "susceptible" peak.
#Yield:
model_fus <- lmer(Score ~ (1|Accession) + (1|Block), data)
summary(model_fus)
Vg <- 3.3031
Ve <- 0.2267
data.no.na <- data[!is.na(data$Score),]
mean(table(data.no.na$Accession))
r <- 3.980531
H2 <- Vg/(Vg+Ve/r)
H2
View(data)
?complete()
?complete.cases()
length(unique(data.no.na$Accession))
#Arithmetic Means:
mean_summary <- aggregate(data$Score, list(data$Accession), FUN=mean, na.rm=TRUE)
model_emm <- lmer(Score ~ Accession + (1|Block), data)
emm <- emmeans(model_emm, "Accession")
emm_summary <- summary(emm)
library(agricolae)
treatment <- c("A", "B", "C", "D")
r = 4 #Number of replications per treatment desired
digits = 3 #Number of digits you want in your plot ID (e.g. 1, 11, 101, 1001)
crd.book <- design.crd(trt=treatment, r=r, serie=digits)
crd.book <- as.data.frame(crd.book)
crd.book
crd.book <- crd.book[,c("book.plots", "book.r", "book.treatment")]
colnames(crd.book) <- c("Plot", "Replication", "Treatment")
crd.book
library(agricolae)
#Completely randomized design (CRD)
#The location remains 'untouched'
#Treatments and replications are randomized throughtout the location
treatment <- c("A", "B", "C", "D")
r = 4 #Number of replications per treatment desired
digits = 3 #Number of digits you want in your plot ID (e.g. 1, 11, 101, 1001)
crd.book <- design.crd(trt=treatment, r=r, serie=digits)
crd.book <- as.data.frame(crd.book)
crd.book <- crd.book[,c("book.plots", "book.r", "book.treatment")]
colnames(crd.book) <- c("Plot", "Replication", "Treatment")
crd.book
i=17
(i-33)*3+1
(i*2-33)*3+1
i*2
(i-1)*2
(i-1)*3+1+32
i=
i
(i-16)*3+1+32
(i-17)*3+1+32
seq(17:32, 2)
seq(17, 32, 2)
seq(33, 36, 2)
i
i:(i+1)
(i-17)*3+1+32
((i-17)*3+1+33)
mean(table(data.no.na$Accession))
table(data$Accession)
mean(table(data$Accession))
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
geno = read.csv("Pincot_2018_2016_geno.csv", header=TRUE, stringsAsFactors = FALSE)
#EMMS:
model_emm <- lmer(Score ~ Accession + (1|Block), data)
emm <- emmeans(model_emm, "Accession")
emm_summary <- summary(emm)
library(dplyr)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
geno = read.csv("Pincot_2018_2016_geno.csv", header=TRUE, stringsAsFactors = FALSE)
#EMMS:
model_emm <- lmer(Score ~ Accession + (1|Block), data)
emm <- emmeans(model_emm, "Accession")
emm_summary <- summary(emm)
head(emm_summary)
geno$EMM <- emm_summary$emmean[match(geno$Accession, emm_summary$Accession)]
#Using base r
boxplot(EMM~AX.166521396, data=geno, notch=TRUE)
#Using ggplot
ggplot(geno, aes(x=AX.166521396, y=EMM)) + geom_boxplot()
ggplot(geno, aes(x=AX.166521396, y=EMM)) + geom_point()
ggplot(geno, aes(x=AX.166521396, y=EMM)) + geom_jitter(height=NULL)
ggplot(geno, aes(x=AX.166521396, y=EMM)) + geom_count()
#Or, using emmeans package (consistent when rounded to 2 decimal points)
data$AX.166521396 <- geno$AX.166521396[match(data$Accession, geno$Accession)]
geno.lm <- lmer(Score ~ AX.166521396 + (1|Block), data)
geno.ls <- emmeans(geno.lm, "AX.166521396")
geno.emm <- summary(geno.ls)
#Assign emms to variables
aa.emm <- geno.emm$emmean[which(geno.emm$AX.166521396 == "A/A")]
ag.emm <- geno.emm$emmean[which(geno.emm$AX.166521396 == "A/G")]
gg.emm <- geno.emm$emmean[which(geno.emm$AX.166521396 == "G/G")]
aa.emm; ag.emm; gg.emm
#Create small dataframe
x <- c(0,1,2)
y <- c(aa.emm,ag.emm,gg.emm)
mini.df <- data.frame(x=x, y=y)
#Plotting using ggplot or base R
ggplot(mini.df, aes(x=x,y=y))+geom_point()+geom_smooth(method="lm", se=FALSE)
plot(mini.df$x, mini.df$y); abline(lm(y ~ x))
alpha <- (aa.emm - gg.emm)/2
delta <- ag.emm - (aa.emm + gg.emm)/2
delta/alpha
model <- lmer(EMM ~ (1|AX.166521396), data=geno)
summary(model)
4.4856/(4.4856+0.3507)
model2 <- lmer(Score ~ (1|AX.166521396) + (1| Accession), data=data)
summary(model2)
4.4798/(4.4798+0.2944 + 0.2280/mean(table(na.omit(data)$Accession)))
#For counts
table(geno$AX.166521396)
#For ratio
16/16;174/16;371/16
View(geno)
# Create sample pedigree object -------------------------------------------
df <- data.frame(
"ID"=1:7,
"P1"=c(0, 0, 0, 1, 2, 4, 6),
"P2"=c(0, 0, 0, 2, 3, 2, 5)
)
df
View(data)
#EMMS:
model_emm <- lmer(Score ~ Accession + (1|Block), data)
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
geno = read.csv("Pincot_2018_2016_geno.csv", header=TRUE, stringsAsFactors = FALSE)
#EMMS:
model_emm <- lmer(Score ~ Accession + (1|Block), data)
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
geno = read.csv("Pincot_2018_2016_geno.csv", header=TRUE, stringsAsFactors = FALSE)
#EMMS:
model_emm <- lmer(Score ~ Accession + (1|Block), data)
View(geno)
str(geno)
0.25/(sqrt(0.1)+sqrt(0.9))
library(emmeans)
library(lme4)
x1 <- sample(21:40, 20, replace=T)
x2 <- sample(c(0, 1), 20, replace=T)
x1
x2
epsilon <- rnorm(20, 0, 1)
Y = 5 + 0.7*x1 + x2 + epsilon
Y
# this is emmeans
model <- lm(Y ~ x1 + x2)
summary(model)
model <- lm(Y ~ x2)
summary(model)
x2
model <- lm(Y ~ x1 + x2)
summary(model)
anova(model)
# this is emmeans
model <- lm(Y ~ (1|x1) + (1|x2))
# this is emmeans
model <- lmer(Y ~ (1|x1) + (1|x2))
summary(model)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(sommer)
library(ggplot2)
library(GWASTools) #for QQ-plot
# library(rrBLUP)
# Step1. read marker data, data pre-processing
load("lab6.RData")
marker.info = data[,c(1:3)] #column 1-3 are marker information
M = data[,-c(1:3)] #remove column 1-3
M = t(M) #marker matrix
colnames(M) = marker.info$probe_id
a.matrix <- sommer::A.mat(M, return.imputed=T)
M_impute = a.matrix$X
G_matrix= a.matrix$A
#Eigenvalue approach
eig.results=eigen(G_matrix)
plot(eig.results$vectors[, 1], eig.results$vectors[, 2], xlab="PC1", ylab="PC2")
lambda=eig.results$values
propotion=lambda/sum(lambda)
plot(propotion, ylab="Fraction Explained", xlab = "Number of Principal Components")
#PCA approach
pca <- prcomp(M_impute)
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
vars <- apply(pca$x, 2, var)
props <- vars / sum(vars)
plot(props, ylab="Fraction Explained", xlab = "Number of Principal Components")
#Variance explained plot
screeplot(pca)
plot(cumsum(props[1:15]), xlab = "PC #", ylab = "Amount of explained variance")
Y = read.csv("phenotypes.txt", header = TRUE, sep = "\t")
Y$Taxa = as.character(Y$Taxa)
Y = Y[Y$Taxa %in% rownames(M),]  #remove ind without genotype (i.e., not in the G matrix)
ggplot(Y, aes(Penetrometer)) + geom_histogram() + xlab("Penetrometer") + ylab("Frequency")
#Sommer: GWAS
mix2 = sommer::GWAS(Penetrometer~1,
random = ~vs(Taxa, Gu=G_matrix),
rcov = ~units,
data = Y,
n.PC = 0,
min.MAF=0,
M = M_impute,
gTerm="u:Taxa")
#Manhattan Plot Preparation (adding chromosome and position information)
ms = as.data.frame(mix2$scores)
ms$probe_id = rownames(ms)
MP2 = merge(marker.info,ms,by="probe_id",all.x = TRUE);
colnames(MP2)[2:3]=c("Chrom","Position")
#Actual Manhattan Plot
manhattan(MP2, pch=20, cex=.5, show.fdr = F, PVCN = "Penetrometer",ylim=c(0,8));abline(h=-log10(0.05/38414))
mix3 = sommer::GWAS(Penetrometer~1,
random = ~vs(Taxa, Gu=G_matrix),
rcov = ~units,
data = Y,
n.PC = 3,
min.MAF=0,
M = M_impute,
gTerm="u:Taxa")
ms3 = as.data.frame(mix3$scores)
ms3$probe_id = rownames(ms3)
MP3 = merge(marker.info,ms3,by="probe_id",all.x = TRUE);
colnames(MP3)[2:3]=c("Chrom","Position")
manhattan(MP3, pch=20, cex=.5, show.fdr = F, PVCN = "Penetrometer",ylim=c(0,8));abline(h=-log10(0.05/38414))
#given marker score, return p-value
PVAL <- function(score){
pval <- sort(10^(-score))
return(pval)
}
#calculate lambda
lambda <- function(pval){
chisq <- qchisq(1-pval,1)
lambda <- median(chisq)/qchisq(0.5,1)
return(lambda)
}
#Convert GWAS scores to p-values
pval1<- PVAL(MP2$`Penetrometer`)
pval2<- PVAL(MP3$`Penetrometer`)
#Calculate lambda
lambda(pval1)
lambda(pval2)
#QQ-plots
qqPlot(pval1)
qqPlot(pval2)
library(rrBLUP)
#Load Data
G.mat <- readRDS("G_Matrix_Dataset2.Rds")
rrGD.gs <- readRDS("Genotypes_Dataset2.Rds")
myY.rr.fus16 <- readRDS("Phenotypes_Dataset2.Rds")
#Run RRBLUP K GWAS
rrBLUP.gwas <- rrBLUP::GWAS(pheno = myY.rr.fus16, geno = rrGD.gs, K=G.mat, plot=FALSE)
#Manhattan Plot
colnames(rrBLUP.gwas) <- c("Probeset", "Chrom", "Position", "p.val")
manhattan(rrBLUP.gwas, pch=20, cex=.5, show.fdr = F, PVCN = "Fusarium2016"); abline(h=-log10(0.05/35144))
#Lambda
pval3<- PVAL(rrBLUP.gwas$p.val) #remember rrBLUP gwas scores in -log10(p), so need to convert to p-values first
lambda(pval3)
str(rrBLUP.gwas)
lambda(pval3)
range(rrBLUP.gwas$p.val)
summary(rrBLUP.gwas$p.val)
manhattan(rrBLUP.gwas, pch=20, cex=.5, show.fdr = F, PVCN = "Fusarium2016"); abline(h=-log10(0.05/35144))
