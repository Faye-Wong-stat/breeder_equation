getwd()
#Note: experiment is in an augmented block design; unreplicated progeny but with replicated checks
data <- read.csv("Guardian_pheno_raw.csv", header=TRUE, stringsAsFactors = FALSE)
geno <- read.csv("Guardian_phys_peak_marker_df.csv", header=TRUE, stringsAsFactors = FALSE)
library(ggplot2);library(ggthemes); library(lme4); library(emmeans)
View(data)
View(geno)
library(ggplot2);library(ggthemes); library(lme4); library(emmeans)
#Note: experiment is in an augmented block design; unreplicated progeny but with replicated checks
data <- read.csv("Guardian_pheno_raw.csv", header=TRUE, stringsAsFactors = FALSE)
geno <- read.csv("Guardian_phys_peak_marker_df.csv", header=TRUE, stringsAsFactors = FALSE)
View(geno)
View(data)
#Basic evaluation of the data
ggplot(data, aes(x=Final_Disease)) + geom_histogram() + theme_bw()
ggplot(data, aes(x=Final_Disease)) + geom_density() + theme_bw()
#Calculate entry EMMs, adjusting for effect of block based on replicated check data
lm.guard <- lmer(Final_Disease ~ Entry + (1|Block), data)
ls.guard <- emmeans(lm.guard, "Entry")
em.guard <- summary(ls.guard)
summary(ls.guard)
summary(lm.guard)
# IGNORE: data simulation #
Block = rep(c(1,2,3,4,5),each=20)
block_effect=Block*1
X=rep(rep(c(-1,1),each=10),5)
Y=X*3+rnorm(100)+block_effect
Treatment=rep(rep(c("trt","control"),each=10),5)
mydata=data.frame(Y=Y,Treatment=as.factor(Treatment),Block=as.factor(Block))
View(mydata)
# lm: fixed Treatment; random Block
mymodel1 = lmer(Y ~ Treatment + (1|Block), mydata)
#summary of the mixed model
summary(mymodel1)
#get the lsmean
mymodel1.em <- emmeans(mymodel1, "Treatment")
summary(mymodel1.em)
#get the variance component
VarCorr(mymodel1)
#BLUPS
ranef(mymodel1)
# lm: fixed Treatment; fixed Block
mymodel0 = lm(Y~Treatment+Block,mydata)
summary(mymodel0)
summary(mymodel1.em)
#summary of the mixed model
summary(mymodel1)
#get the lsmean
mymodel1.em <- emmeans(mymodel1, "Treatment")
#summary of the mixed model
summary(mymodel1)
summary(mymodel1.em)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(lawstat)
# data organization
str(Titanic)
# change into data frame
titanic <- as.data.frame(Titanic)
str(titanic)
titanic$Survival <- NA
for (i in 1:nrow(titanic)){
if (titanic$Survived[i]=="No"){
titanic$Survival[i]=0
} else {
titanic$Survival[i]=1
}
}
n.times <- titanic$Freq
titanic.new <- titanic[rep(seq_len(nrow(titanic)),n.times),]
titanic.new <- titanic.new[,-c(4,5)]
rownames(titanic.new) <- 1:nrow(titanic.new)
titanic <- titanic.new
# each observation has both 0 and 1 outcomes
#titanic$Yes <- c(titanic$Freq[17:32],rep(NA,16))
#titanic <- titanic[1:16,]
#titanic <- titanic[,-4]
#colnames(titanic)[4] <- "No"
# a model only includes intercept
tit.bin.0 <- glm(Survival ~ 1, data=titanic, family="binomial")
summary(tit.bin.0)
# additive model
tit.bin <- glm(Survival ~ Class + Sex + Age, data=titanic, family="binomial")
summary(tit.bin)
# include all the two-way interaction and call it full model
tit.bin.full <- glm(Survival ~ Class + Sex + Age + Class:Sex + Class:Age + Sex:Age, data=titanic, family="binomial")
summary(tit.bin.full)
# model fitting
stepAIC(tit.bin.0, scope=list(lower=tit.bin.0,upper=tit.bin.full), direction="both")
stepAIC(tit.bin.0, scope=list(lower=tit.bin.0,upper=tit.bin.full), direction="both",
k=log(nrow(titanic)))
# model includes class, sex, age, the interacitons between class and sex, and between class and age
tit.bin.2 <- glm(formula = Survival ~ Class + Sex + relevel(Age,ref="Adult") + Class:Sex +
Class:relevel(Age,ref="Adult"),
family = "binomial", data = titanic)
summary(tit.bin.2)
anova(mymodel1)
#summary of the mixed model
summary(mymodel1)
library(ggplot2)
library(lme4)
library(emmeans)
getwd()
setwd("..")
getwd()
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("PLS225_lab_dataset_1.csv", header=TRUE, stringsAsFactors = FALSE)
#To see class
(sapply(data, class))
#Number of lines:
length(unique(data$Accession))
#Number of blocks:
length(unique(data$Block))
#Number of lines:
length(unique(data$Accession))
View(data)
library(ggplot2)
library(lme4)
library(emmeans)
data = read.csv("Pincot_2018_2016_data.csv", header=TRUE, stringsAsFactors = FALSE)
#To see class
(sapply(data, class))
#Number of lines:
length(unique(data$Accession))
#Number of blocks:
length(unique(data$Block))
#Base R histogram:
hist(na.omit(data$Score))
#Base R density:
plot(density(na.omit(data$Score)))
#ggplot2:
#ggplot(data, aes(x=Score)) + geom_histogram()
#ggplot(data, aes(x=Score)) + geom_density()
#Distribution is bimodal (one peak for resistant material, one peak for susceptible material)
#Using functions:
var(data$Score, na.rm=TRUE)
mean(data$Score, na.rm=TRUE)
sd(data$Score, na.rm=TRUE)
#Since the distribution is bimodal, further details would have to be given regarding the "resistant" peak or "susceptible" peak.
#Yield:
model_fus <- lmer(Score ~ (1|Accession) + (1|Block), data)
summary(model_fus)
Vg <- 3.3031
Ve <- 0.2267
data.no.na <- data[!is.na(data$Score),]
mean(table(data.no.na$Accession))
r <- 3.980531
H2 <- Vg/(Vg+Ve/r)
H2
getwd()
setwd("~")
getwd()
library(emmeans)
x1 <- sample(21:40, 20, replace=T)
x2 <- sample(c(0, 1), 20, replace=T)
epsilon <- rnorm(20, 0, 1)
Y = 5 + 0.7*x1 + x2 + epsilon
model <- lm(Y ~ x1 + x2)
summary(model)
model_em <- emmeans(model, "x2")
summary(model_em)
class(summary(model_em))
str(summary(model_em))
summary(model_em)$emmean
class(summary(model_em))
str(summary(model_em))
summary(model_em)$emmean
model_em
class(model_em)
model
summary(fam_var_mean_var_sd_4$var_mean)
sf <- c(0.8, 0.9, 0.95, 0.98)
b <- qnorm(sf, 0, 1)
B
b
dnorm(b, 0, 1)
pnorm(b, 0, 1, lower.tail=F)
si <- dnorm(b, 0, 1) / pnorm(b, 0, 1, lower.tail=F)
si
p=0.25
x <- rbinom(1000, 2, p)
unique(x)
mean(x)
w <- ifelse(x==1, 1, 0)
head(which(x==2))
# [1]  16  37  73  79  89 111
w[head(which(x==2))]
sum((x==0) != (w==0))
sum((x==0))
sum(w[x==0])
sum(w[x==0])
# [1] 0
sum(w[x==2])
# [1] 0
sum((x==1) != (w==1))
mean(w)
# [1] 0.529
mean(x)/2
p_hat <- mean(x)/2
# [1] 0.399
2*p_hat*(1-p_hat)
install.packages("cowplot")
library(rstan)
library("rstan")
require(Matrix)
getwd()
setwd("/Users/fangyiwang/Documents/GitHub")
getwd()
setwd("breeder_equation/")
ls()
list.files()
getwd()
